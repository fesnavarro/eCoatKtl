FUNCTION "fDcontrol" : Void
TITLE = fCmotor
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : fesnavarro
FAMILY : door
NAME : '3030'
VERSION : 0.8
//Function for motor parameters
   VAR_INPUT 
      location : Int;
   END_VAR

   VAR_IN_OUT 
      index : "tIndex";
   END_VAR

   VAR_TEMP 
      parDoor : REF_TO "tParameterDoor";
      action : REF_TO "tAction";
      actual : REF_TO "tActual";
      interface : REF_TO "tInterface";
      i : Int;
      parent : REF_TO "tEquipment";
      control : REF_TO "tControl";
      slotConveyor : REF_TO "tSlot";
   END_VAR


BEGIN
	#actual := REF("dbData".actual);
	#action := REF("dbData".action);
	#parDoor := REF("dbArchiveParDoor".parDoor[#index.pathParent]);
	#parent := REF("dbArchiveEquipDoor".equipmentDoor[#index.pathParent]);
	#control := REF("dbArchiveControlDoor".controlDoor[#index.pathParent].control[#index.acc]);
	
	#control^.selectedByInterface := 0;
	REGION interface selected
	    FOR #i := 1 TO 6 DO
	        IF #index.pathParent = ("dbInterface".interface[#i].equipamentId - #location) AND
	            #index.acc = "dbInterface".interface[#i].controlId THEN
	            #control^.selectedByInterface := #i;
	            "dbInterface".interface[#i].auxStatus[2].setSignal := TRUE;
	            "fStatus"("dbInterface".interface[#i].auxStatus[2]);
	        ELSIF #i >= 5 AND
	            #index.pathParent = ("dbInterface".interface[#i].equipamentId - #location) THEN
	            #control^.selectedByInterface := #i;
	        END_IF;
	    END_FOR;
	END_REGION
	
	REGION automatic or manual
	    REGION parameters
	        CASE #index.pathParent (*parent*)OF
	            1..4:
	                CASE #index.acc (*control*)OF
	                    1:
	                        //set
	                        #control^.autoMan.setDelayOfAuto := 50;
	                        #control^.autoMan.setDelayOfManual := 50;
	                        #control^.autoMan.setPulseSelAutoMan :=
	                        "dbInterface".interface[#control^.selectedByInterface].autoMan.setPulseSelAutoMan;
	                        "dbInterface".interface[#control^.selectedByInterface].autoMan.getStsManual :=
	                        #control^.autoMan.getStsManual;
	                        #control^.autoMan.setSelAuto := #parent^.autoMan.getStsAuto;
	                        #control^.autoMan.setSelManual := NOT #parent^.autoMan.getStsManual;
	                END_CASE;
	        END_CASE;
	    END_REGION
	    
	    REGION call function
	        "fAutoMan"(#control^.autoMan);
	    END_REGION
	END_REGION
	
	REGION automatic and running
	    REGION parameters
	        CASE #index.pathParent (*parent*)OF
	            1..4:
	                CASE #index.acc (*control*)OF
	                    1:
	                        //set
	                        #control^.autoRun.setFailureDetected :=
	                        #actual^.generalFailureDetected.signal;
	                        #control^.autoRun.setDelayTurnOff := 50;
	                        #control^.autoRun.setDelayTurnOn := 50;
	                        #control^.autoRun.setPulseSelAutoRun :=
	                        "dbInterface".interface[#control^.selectedByInterface].autoRun.setPulseSelAutoRun;
	                        #control^.autoRun.setSelTurnOn := #parent^.autoRun.getStsAutoRun;
	                        #control^.autoRun.setSelTurnOff := NOT #parent^.autoRun.getStsAutoRun;
	                        #control^.autoRun.setStsAuto :=
	                        #control^.autoMan.getStsAuto;
	                        "dbInterface".interface[#control^.selectedByInterface].autoRun.getStsAutoRun :=
	                        #control^.autoRun.getStsAutoRun;
	                END_CASE;
	        END_CASE;
	    END_REGION
	    
	    REGION call function
	        "fAutoRun"(#control^.autoRun);
	    END_REGION
	END_REGION
	
	REGION inputs from activation
	    REGION parameters
	        CASE #index.pathParent (*equipment number*)OF
	            1..4:
	                CASE #index.acc (*control number*)OF
	                    1:
	                        //set
	                        #control^.inputMotorDrive.setFailureDetected :=
	                        #control^.outputMotorDrive.sina.Error;
	                        // := #motor.outputInversor.sina.#Status;
	                        // := #motor.outputInversor.sina.DiagId;
	                        #control^.inputMotorDrive.setDelayActive := 500;
	                        #control^.inputMotorDrive.setDelayFailure := 500;
	                        #control^.inputMotorDrive.setDelayForward := 500;
	                        #control^.inputMotorDrive.setDelayReturn := 500;
	                        #control^.inputMotorDrive.setDelayReady := 500;
	                        #control^.inputMotorDrive.setActive := #control^.outputMotorDrive.sina.AxisEnabled;
	                        //#motor.inputInversor.setForwardSignal := FALSE;// (*variableFrom*);
	                        //#motor.inputInversor.setReturnSignal := FALSE;// (*variableFrom*);
	                        #control^.inputMotorDrive.setReady := NOT #control^.outputMotorDrive.sina.Lockout;
	                        #control^.inputMotorDrive.setSpeed := REAL_TO_DINT(#control^.outputMotorDrive.sina.ActVelocity);
	                        #actual^.inversorFailureDetectedDoor[#index.pathParent].signal :=
	                        #control^.inputMotorDrive.getFailureDetected;
	                END_CASE;
	        END_CASE;
	    END_REGION
	    
	    REGION call function
	        "fInputMotorDrive"(#control^.inputMotorDrive);
	    END_REGION
	END_REGION
	
	REGION command
	    REGION parameters
	        CASE #index.pathParent (*parent*)OF
	            1..4:
	                CASE #index.acc (*control*)OF
	                    1:
	                        //set
	                        #control^.command.setFailureDetected :=
	                        #actual^.generalFailureDetected.signal;
	                        "fDautomatic"(index := #index,
	                                      autoRunEnable := #control^.autoRun.getStsAutoRun,
	                                      setAutoForward => #control^.command.setAutoForward,
	                                      setAutoReturn => #control^.command.setAutoReturn);
	                        
	                        #control^.command.setRetentionManForward :=
	                        "dbInterface".interface[#control^.selectedByInterface].command.setRetentionManForward;
	                        
	                        #control^.command.setRetentionManReturn :=
	                        "dbInterface".interface[#control^.selectedByInterface].command.setRetentionManReturn;
	                        
	                        #control^.command.setStsManual := #control^.autoMan.getStsManual;
	                        #control^.command.setStsAutoRun := #control^.autoRun.getStsAutoRun;
	                        
	                        "dbInterface".interface[#control^.selectedByInterface].command.getRetentionManForward :=
	                        #control^.command.getRetentionManForward;
	                        "dbInterface".interface[#control^.selectedByInterface].command.getRetentionManReturn :=
	                        #control^.command.getRetentionManReturn;
	                        "dbInterface".interface[#control^.selectedByInterface].command.getTurnOnForward :=
	                        #control^.command.getTurnOnForward;
	                        "dbInterface".interface[#control^.selectedByInterface].command.getTurnOnReturn :=
	                        #control^.command.getTurnOnReturn;
	                        "dbInterface".interface[#control^.selectedByInterface].command.getConditionForward :=
	                        #control^.command.getConditionForward;
	                        "dbInterface".interface[#control^.selectedByInterface].command.getConditionReturn :=
	                        #control^.command.getConditionReturn;
	                        REGION releaseRetention
	                            IF #control^.selectedByInterface = 5 THEN
	                                #control^.command.aux[10] := FALSE;
	                                #control^.command.aux[11] := FALSE;
	                            END_IF;
	                        END_REGION
	                END_CASE;
	        END_CASE;
	        CASE #index.pathParent (*parent*)OF
	            1:
	                #slotConveyor := REF("dbArchiveSlotConveyor".slotConveyor[3].slot[5]);
	                CASE #index.acc (*control*)OF
	                    1:
	                        #control^.command.setIntertwatingForward := FALSE;
	                        IF #slotConveyor^.delivering THEN
	                            #control^.command.setIntertwatingForward := TRUE;
	                        END_IF;
	                        IF #control^.autoMan.getStsManual THEN
	                            #control^.command.setIntertwatingForward := FALSE;
	                        END_IF;
	                        IF #actual^.advancedADoor[#index.pathParent].signal OR
	                            #actual^.advancedBDoor[#index.pathParent].signal THEN
	                            #control^.command.setIntertwatingForward := TRUE;
	                        END_IF;
	                        IF #actual^.skidDetectedDConveyor[3].signal OR
	                            #actual^.skidDetectedEConveyor[3].signal THEN
	                            #control^.command.setIntertwatingForward := TRUE;
	                        END_IF;
	                        
	                        #control^.command.setIntertwatingReturn := FALSE;
	                        IF NOT #actual^.advancedADoor[#index.pathParent + 1].signal OR
	                            NOT #actual^.advancedBDoor[#index.pathParent + 1].signal THEN
	                            #control^.command.setIntertwatingReturn := TRUE;
	                        END_IF;
	                        IF #control^.autoMan.getStsManual THEN
	                            #control^.command.setIntertwatingReturn := FALSE;
	                        END_IF;
	                        IF #actual^.returnedADoor[#index.pathParent].signal OR
	                            #actual^.returnedBDoor[#index.pathParent].signal THEN
	                            #control^.command.setIntertwatingReturn := TRUE;
	                        END_IF;
	                        
	                        #control^.command.setManForward :=
	                        "dbInterface".interface[#control^.selectedByInterface].command.setManForward OR
	                        #actual^.downArrow[#control^.selectedByInterface].signal;
	                        
	                        #control^.command.setManReturn :=
	                        "dbInterface".interface[#control^.selectedByInterface].command.setManReturn OR
	                        #actual^.upArrow[#control^.selectedByInterface].signal;
	                END_CASE;
	            2:
	                #slotConveyor := REF("dbArchiveSlotConveyor".slotConveyor[3].slot[6]);
	                CASE #index.acc (*control*)OF
	                    1:
	                        #control^.command.setIntertwatingForward := FALSE;
	                        IF #slotConveyor^.delivering THEN
	                            #control^.command.setIntertwatingForward := TRUE;
	                        END_IF;
	                        IF #control^.autoMan.getStsManual THEN
	                            #control^.command.setIntertwatingForward := FALSE;
	                        END_IF;
	                        IF #actual^.advancedADoor[#index.pathParent].signal OR
	                            #actual^.advancedBDoor[#index.pathParent].signal THEN
	                            #control^.command.setIntertwatingForward := TRUE;
	                        END_IF;
	                        IF #actual^.skidDetectedFConveyor[3].signal THEN
	                            #control^.command.setIntertwatingForward := TRUE;
	                        END_IF;
	                        
	                        #control^.command.setIntertwatingReturn := FALSE;
	                        IF NOT #actual^.advancedADoor[#index.pathParent - 1].signal OR
	                            NOT #actual^.advancedBDoor[#index.pathParent - 1].signal THEN
	                            #control^.command.setIntertwatingReturn := TRUE;
	                        END_IF;
	                        IF #control^.autoMan.getStsManual THEN
	                            #control^.command.setIntertwatingReturn := FALSE;
	                        END_IF;
	                        IF #actual^.returnedADoor[#index.pathParent].signal OR
	                            #actual^.returnedBDoor[#index.pathParent].signal THEN
	                            #control^.command.setIntertwatingReturn := TRUE;
	                        END_IF;
	                        
	                        #control^.command.setManForward :=
	                        "dbInterface".interface[#control^.selectedByInterface].command.setManForward OR
	                        #actual^.downArrow[#control^.selectedByInterface].signal;
	                        
	                        #control^.command.setManReturn :=
	                        "dbInterface".interface[#control^.selectedByInterface].command.setManReturn OR
	                        #actual^.upArrow[#control^.selectedByInterface].signal;
	                END_CASE;
	            3:
	                #slotConveyor := REF("dbArchiveSlotConveyor".slotConveyor[4].slot[4]);
	                CASE #index.acc (*control*)OF
	                    1:
	                        #control^.command.setIntertwatingForward := FALSE;
	                        IF #slotConveyor^.delivering THEN
	                            #control^.command.setIntertwatingForward := TRUE;
	                        END_IF;
	                        IF #control^.autoMan.getStsManual THEN
	                            #control^.command.setIntertwatingForward := FALSE;
	                        END_IF;
	                        IF #actual^.advancedADoor[#index.pathParent].signal OR
	                            #actual^.advancedBDoor[#index.pathParent].signal THEN
	                            #control^.command.setIntertwatingForward := TRUE;
	                        END_IF;
	                        IF #actual^.skidDetectedAConveyor[4].signal AND #slotConveyor^.delivering THEN
	                            #control^.command.setIntertwatingForward := TRUE;
	                        END_IF;
	                        
	                        #control^.command.setIntertwatingReturn := FALSE;
	                        IF NOT #actual^.advancedADoor[#index.pathParent + 1].signal OR
	                            NOT #actual^.advancedBDoor[#index.pathParent + 1].signal THEN
	                            #control^.command.setIntertwatingReturn := TRUE;
	                        END_IF;
	                        IF #control^.autoMan.getStsManual THEN
	                            #control^.command.setIntertwatingReturn := FALSE;
	                        END_IF;
	                        IF #actual^.returnedADoor[#index.pathParent].signal OR
	                            #actual^.returnedBDoor[#index.pathParent].signal THEN
	                            #control^.command.setIntertwatingReturn := TRUE;
	                        END_IF;
	                        
	                        #control^.command.setManForward :=
	                        "dbInterface".interface[#control^.selectedByInterface].command.setManForward OR
	                        #actual^.downArrow[#control^.selectedByInterface].signal;
	                        
	                        #control^.command.setManReturn :=
	                        "dbInterface".interface[#control^.selectedByInterface].command.setManReturn OR
	                        #actual^.upArrow[#control^.selectedByInterface].signal;
	                END_CASE;
	            4:
	                #slotConveyor := REF("dbArchiveSlotConveyor".slotConveyor[5].slot[1]);
	                CASE #index.acc (*control*)OF
	                    1:
	                        #control^.command.setIntertwatingForward := FALSE;
	                        IF #slotConveyor^.delivering THEN
	                            #control^.command.setIntertwatingForward := TRUE;
	                        END_IF;
	                        
	                        IF #control^.autoMan.getStsManual THEN
	                            #control^.command.setIntertwatingForward := FALSE;
	                        END_IF;
	                        
	                        IF #actual^.advancedADoor[#index.pathParent].signal OR
	                            #actual^.advancedBDoor[#index.pathParent].signal THEN
	                            #control^.command.setIntertwatingForward := TRUE;
	                        END_IF;
	                        
	                        IF #actual^.skidDetectedAConveyor[5].signal AND
	                            #actual^.skidDetectedBConveyor[5].signal THEN
	                            #control^.command.setIntertwatingForward := TRUE;
	                        END_IF;
	                        
	                        #control^.command.setIntertwatingReturn := FALSE;
	                        IF NOT #actual^.advancedADoor[#index.pathParent - 1].signal OR
	                            NOT #actual^.advancedBDoor[#index.pathParent - 1].signal THEN
	                            #control^.command.setIntertwatingReturn := TRUE;
	                        END_IF;
	                        
	                        IF #control^.autoMan.getStsManual THEN
	                            #control^.command.setIntertwatingReturn := FALSE;
	                        END_IF;
	                        IF #actual^.returnedADoor[#index.pathParent].signal OR
	                            #actual^.returnedBDoor[#index.pathParent].signal THEN
	                            #control^.command.setIntertwatingReturn := TRUE;
	                        END_IF;
	                        
	                        #control^.command.setManForward :=
	                        "dbInterface".interface[#control^.selectedByInterface].command.setManForward OR
	                        #actual^.downArrow[#control^.selectedByInterface].signal;
	                        
	                        #control^.command.setManReturn :=
	                        "dbInterface".interface[#control^.selectedByInterface].command.setManReturn OR
	                        #actual^.upArrow[#control^.selectedByInterface].signal;
	                END_CASE;
	        END_CASE;
	    END_REGION
	    
	    REGION call function
	        "fCommand"(#control^.command);
	    END_REGION
	END_REGION
	
	REGION power
	    REGION parameters
	        CASE #index.pathParent (*parent*)OF
	            1..4:
	                CASE #index.acc (*control*)OF
	                    1:
	                        //set
	                        #control^.power.setFaliureDetected :=
	                        #actual^.generalFailureDetected.signal;
	                        #control^.power.setLow := FALSE;//FORCED
	                        #control^.power.setAverage := TRUE;//FORCED
	                        #control^.power.setHigh := FALSE;//FORCED
	                        #control^.power.setSpeedLow := 500;//FORCED
	                        #control^.power.setSpeedAverage := 800;//FORCED
	                        #control^.power.setSpeedHigh := 1800;//FORCED
	                END_CASE;
	        END_CASE;
	    END_REGION
	    
	    REGION call function
	        "fPower"(#control^.power);
	    END_REGION
	END_REGION
	
	REGION output to activation
	    REGION parameters
	        CASE #index.pathParent (*parent*)OF
	            1..4:
	                CASE #index.acc (*control*)OF
	                    1:
	                        //set
	                        #control^.outputMotorDrive.setFailureDetected :=
	                        #actual^.generalFailureDetected.signal;
	                        #control^.outputMotorDrive.setForward :=
	                        #control^.command.getTurnOnForward;
	                        #control^.outputMotorDrive.setReturn :=
	                        #control^.command.getTurnOnReturn;
	                        #control^.outputMotorDrive.setSpeed :=
	                        #control^.power.getSpeed;
	                        #control^.outputMotorDrive.setResetFailure :=
	                        #actual^.generalResetFailure.signal;
	                        //get
	                        #control^.outputMotorDrive.sina.ConfigAxis := 16#0003F;
	                        #control^.outputMotorDrive.sina.ConfigAxis.%X5 :=
	                        NOT #control^.outputMotorDrive.getStop;
	                        #control^.outputMotorDrive.sina.ConfigAxis.%X6 :=
	                        NOT #control^.outputMotorDrive.getReturn; 
	                        #control^.outputMotorDrive.sina.AckError :=
	                        #control^.outputMotorDrive.getResetFailure;
	                        #control^.outputMotorDrive.sina.EnableAxis :=
	                        #control^.outputMotorDrive.getStart;
	                        #control^.outputMotorDrive.sina.SpeedSp :=
	                        #control^.outputMotorDrive.getSpeed;
	                        #control^.outputMotorDrive.sina.RefSpeed := 1800;
	                END_CASE;
	        END_CASE;
	        CASE #index.pathParent (*parent*)OF
	            1:
	                CASE #index.acc (*control*)OF
	                    1:
	                        //set
	                        #control^.outputMotorDrive.sina.HWIDSTW :=
	                        "oven9v1~PROFINET_interface~Standard_telegram_1";
	                        #control^.outputMotorDrive.sina.HWIDZSW :=
	                        "oven9v1~PROFINET_interface~Standard_telegram_1";
	                END_CASE;
	            2:
	                CASE #index.acc (*control*)OF
	                    1:
	                        //set
	                        #control^.outputMotorDrive.sina.HWIDSTW :=
	                        "oven9v2~PROFINET_interface~Standard_telegram_1";
	                        #control^.outputMotorDrive.sina.HWIDZSW :=
	                        "oven9v2~PROFINET_interface~Standard_telegram_1";
	                END_CASE;
	            3:
	                CASE #index.acc (*control*)OF
	                    1:
	                        //set
	                        #control^.outputMotorDrive.sina.HWIDSTW :=
	                        "oven10v1~PROFINET_interface~Standard_telegram_1";
	                        #control^.outputMotorDrive.sina.HWIDZSW :=
	                        "oven10v1~PROFINET_interface~Standard_telegram_1";
	                END_CASE;
	            4:
	                CASE #index.acc (*control*)OF
	                    1:
	                        //set
	                        #control^.outputMotorDrive.sina.HWIDSTW :=
	                        "oven10v2~PROFINET_interface~Standard_telegram_1";
	                        #control^.outputMotorDrive.sina.HWIDZSW :=
	                        "oven10v2~PROFINET_interface~Standard_telegram_1";
	                END_CASE;
	        END_CASE;
	    END_REGION
	    
	    REGION call function
	        "fOutputMotorDrive"(#control^.outputMotorDrive);
	        "fSina"(#control^.outputMotorDrive.sina);
	    END_REGION
	END_REGION
END_FUNCTION

